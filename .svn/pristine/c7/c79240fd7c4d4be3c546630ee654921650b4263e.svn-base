-- | Este módulo define funções comuns da Tarefa 4 do trabalho prático.
module Tarefa4_2019li1g102 where
import Tarefa0_2019li1g102
import Tarefa1_2019li1g102
import Tarefa2_2019li1g102
import Tarefa3_2019li1g102
import Data.Tuple
import LI11920

-- comandos para instalar o gloss
-- cabal update
-- sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev
-- cabal install --lib gloss

-- * Testes
-- | Testes unitários da Tarefa 4.
--
-- Cada teste é um par (/tempo/,/'Mapa'/,/'Jogador'/).
testesT4 :: [(Double,Mapa,Jogador)]
testesT4 = [(100, testMapa, j0),(1, testMapa, j0),(1.23, testMapa, j1),(2.24, testMapa, j2),(4.2, testMapa, j3),(1.0, testMapa, j4),(0, testMapa, j5),(20, testMapa, j6),(0.1, testMapa, j7),(0.99999, testMapa, j8),(9.0, testMapa, j10),(0.01, testMapa, j11),(20, testMapa, j12),(7,(gera 2 20 6),j13)]

j0=(Jogador 0 5.2 2.0 42 (Chao True))
j1=(Jogador 1 2.5 0.5 18 (Chao True))
j2=(Jogador 2 3.1 3.0 24 (Chao False))
j3=(Jogador 3 4.0 4.0 0 (Chao True))
j4=(Jogador 4 0.0 2.0 1 (Chao True))
j5=(Jogador 5 6.9 4.1 2 (Ar 20.0 (-90) 2))
j6=(Jogador 6 6.9 4.1 2 (Ar 20.0 (-80) 1))
j7=(Jogador 7 7.3 2.1 3 (Ar 20.0 90 1.3))
j8=(Jogador 8 8.4 3.0 4 (Ar 5.0 80 0.7))
j10=(Jogador 10 5.4 1.0 5 (Chao True))
j11=(Jogador 11 0.2 0.0 0 (Morto 1.0))
j12=(Jogador 6 6.9 4.1 2 (Ar 20.0 20 1))
j13=(Jogador 1 2.8 4 1 (Ar 2 30 0))


testezito = passo 7 (gera 2 20 6) j13

-- * Funções principais da Tarefa 4.

-- | Avança o estado de um 'Jogador' um 'passo' em frente, durante um determinado período de tempo.
passo :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após um 'passo'.
passo t m j = move t m (acelera t m j)


-- | Altera a velocidade de um 'Jogador', durante um determinado período de tempo.
acelera :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após acelerar.
acelera t m j@(Jogador a b v c d) = novaGravidade (Jogador a b velAposAcel c d) t 
                                  where 
                                  velAposAcel = novaVelocidade t m j  


-- | Altera a posição de 'Jogador', durante um determinado período de tempo.
move :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após se movimentar.
move t m j = case (estadoJogador j) of
               Morto _  -> fromMorto t j
               Chao _   -> fromChao t m j
               Ar _ _ _ -> fromAr t m j 


-- ** Funções auxiliares
-- | Funçao que calcula uma velocidade depois de um jogador acelarar no chão (v' = v + (accelMota - atrito * v) * t) ou ,caso esteja no ar, (v' = v - (resistenciaAr * v * t))
novaVelocidade :: Double -> Mapa -> Jogador -> Double
novaVelocidade t m j = case (estadoJogador j) of
               Morto _  -> 0
               Chao _   -> arredondaNegativos (v+(accelMota j-atrito pecaDoJogador*v)*t)
               Ar _ _ _ -> arredondaNegativos (v - (0.125*v*t))
               where (x,y)         = coordenadaJogador j
                     pecaDoJogador = encontraPosicaoMatriz (x,y) m 
                     v             = velocidadeJogador j 


-- | Retorna o Double que recebe ou 0 caso seja menor que 0
arredondaNegativos :: Double -> Double
arredondaNegativos x | x < 0 = 0
                     | otherwise = x 


-- | Retorna 1 caso seja possivel acelerar e 0 caso contrário
accelMota :: Jogador -> Double
accelMota j@(Jogador _ _ v _ _) | v < 2 && (accelJogador j) = 1
                                | otherwise                 = 0

-- | Retorna True caso o jogador esteja no Chao a acelerar e False caso contrário
accelJogador :: Jogador -> Bool
accelJogador (Jogador _ _ _ _ (Chao e)) = e

-- | Retorna o 'Piso' de uma 'Peca'
getPiso :: Peca -> Piso 
getPiso (Recta p _ )   = p
getPiso (Rampa p _ _ ) = p


-- | Retorna o atrito de cada 'Peca'
atrito :: Peca -> Double
atrito peca = case getPiso peca of 
                   Terra ->  0.25
                   Relva ->  0.75
                   Lama  ->  1.50
                   Boost ->  (-0.50)
                   Cola  ->  3.00 

-- | Nova Gravidade do jogador
novaGravidade :: Jogador -> Double -> Jogador 
novaGravidade j@(Jogador p d v c (Ar h i g)) t  = (Jogador p d v c (Ar h i (g + (1 * t))))
novaGravidade j _ = j

-- | Retorna um 'Jogador' após estar morto durante t segundos
fromMorto :: Double -> Jogador -> Jogador
fromMorto t j@(Jogador p d v c (Morto to)) | to-t>0    = Jogador p d v c (Morto (to-t))
                                           | otherwise = Jogador p d 0 c (Chao False)


-- | Retorna um 'Jogador' inicialmente no chao passados t segundos
fromChao :: Double -> Mapa -> Jogador -> Jogador
fromChao t m j@(Jogador p d v c (Chao b)) | distN  >= limSup  = if (incSeguinte >= incPeca ) then Jogador p limSup v c (Chao b)
                                                                                             else Jogador p limSup v c (Ar altN incPeca 0)
                                          | otherwise         = Jogador p distN  v c (Chao b)
                                    where (x,y)        =  coordenadaJogador j
                                          limSup       =  fromIntegral(y+1) 
                                          pecaAtual    =  encontraPosicaoMatriz (x,y) m
                                          pecaSeguinte =  encontraPosicaoMatriz (x,y+1) m
                                          incPeca      =  inclinacaoPeca (pecaAtual)
                                          incSeguinte  =  inclinacaoPeca (pecaSeguinte)
                                          altN         =  altPeca(pecaAtual)+posy(vetorVel j m)*t
                                          distN        =  d+(posx (vetorVel j m))*t
                                    

-- | Retorna um 'Jogador' inicialmente no ar passados t segundos 
fromAr :: Double -> Mapa -> Jogador -> Jogador
fromAr t m j@(Jogador p d v c (Ar alt inc g)) | distN >= limSup   = (Jogador p limSup v c (Ar (altF) inc g))
                                              | otherwise         = if (not(intersetam retaDaPeca  retaDoJogador)) 
                                                                    then Jogador p distN v c (Ar altN inc g)
                                                                    else if (difInc >= 45) then Jogador p dist 0 c (Morto 1.0)
                                                                                           else Jogador p dist velQueda c (Chao False)
                                              where (x,y)         = coordenadaJogador j
                                                    limSup        = fromIntegral(y+1)
                                                    pecaAtual     = encontraPosicaoMatriz (x,y) m
                                                    incPeca       = inclinacaoPeca (pecaAtual)
                                                    retaDoJogador = (coordenAr j, (Cartesiano distN altN))
                                                    retaDaPeca    = retaPeca d (pecaAtual)
                                                    dist          = posx (intersecao retaDoJogador retaDaPeca)
                                                    distN         = d+(posx vetorArF)
                                                    altN          = alt+(posy vetorArF)
                                                    altF          = posy (intersecao retaDoJogador (retaVerticalPeca j))
                                                    vetorArF      = multiplicaVetor t (somaVetores (Polar v inc) (Polar g (normalizaAngulo (-90))))
                                                    difInc        = abs(inc-incPeca)
                                                    velQueda      = v*cos(radians (incPeca-inc))

-- | Função que calcula a inclinação de uma 'Peca'
inclinacaoPeca :: Peca -> Double
inclinacaoPeca (Rampa _ a1 a2) = degrees(atan (fromIntegral(a2-a1)))
inclinacaoPeca _ = 0.0

-- | Função que retorna a altura final de uma 'Peca'
altPeca :: Peca -> Double
altPeca (Rampa _ _ h) = fromIntegral h
altPeca (Recta _   h) = fromIntegral h


-- | Função que dá as coordenadas de um 'Jogador' no ar
coordenAr:: Jogador -> Vetor
coordenAr (Jogador _ d _ _ (Ar alt _ _ )) =  Cartesiano d alt


-- | Retorna o 'Vetor' da velocidade de um 'Jogador' 
vetorVel :: Jogador -> Mapa -> Vetor
vetorVel j@(Jogador _ _ v _ (Chao _)) m   = Polar v incPeca 
                                    where (x,y)     = coordenadaJogador j 
                                          incPeca   = inclinacaoPeca (pecaAtual)
                                          pecaAtual = encontraPosicaoMatriz (x,y) m
vetorVel (Jogador _ _ v _ (Ar _ inc g)) m = Polar v (normalizaAngulo inc)
                      

-- | Retorna o 'Vetor' da gravidade de um 'Jogador'
vetorGrav :: Jogador -> Vetor
vetorGrav (Jogador _ _ v _ (Ar _ _ g)) = Polar g (normalizaAngulo (-90))

-- | Função que dá a 'Reta' com o declive da 'Peca' correspondente
retaPeca :: Double -> Peca -> Reta
retaPeca d (Rampa _ y1 y2)  = (Cartesiano (fromIntegral(floor d)) (fromIntegral(y1)), Cartesiano (fromIntegral((floor d )+ 1)) (fromIntegral(y2))) 
retaPeca d (Recta _ y)      = (Cartesiano (fromIntegral(floor d)) (fromIntegral(y)), Cartesiano (fromIntegral((floor d )+ 1)) (fromIntegral(y)))


-- | Função que calcula a 'Reta' Vertical do fim da peça em que o jogador se encontra
retaVerticalPeca :: Jogador -> Reta
retaVerticalPeca (Jogador p d v c _) = (Cartesiano (fromIntegral((floor d )+ 1)) 0.0 , Cartesiano (fromIntegral((floor d )+ 1)) 100.0)