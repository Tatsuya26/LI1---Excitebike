-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Main where
import Tarefa0_2019li1g102
import Tarefa1_2019li1g102
import Tarefa2_2019li1g102
import Tarefa3_2019li1g102
import Tarefa4_2019li1g102
import LI11920
import Graphics.Gloss
import Graphics.Gloss.Juicy
import Graphics.Gloss.Interface.Pure.Game
import Data.List

-- | Função principal da Tarefa 5. 
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
window :: Display
window = FullScreen

background :: Color
background = orange

frameRate :: Int
frameRate = 50

type StatusGloss = (Estado,[[Picture]])

width :: Float
width = -600

height :: Float
height = 50

wPeca :: Float
wPeca = 200

hPeca :: Float
hPeca = 40 

gameState :: Estado
gameState = (Estado [[Recta Terra 0,Recta Lama 0,Rampa Cola 0 1, Rampa Lama 1 3, Rampa Cola 3 4, Rampa Cola 4 5, Rampa Boost 5 1, Rampa Relva 1 0, Recta Cola 0]] [(Jogador 0 0 0 4 (Chao False)),(Jogador 1 0 0 4 (Chao False)),(Jogador 2 0 0 4 (Chao False)),(Jogador 3 0 0 4 (Chao False)),(Jogador 4 0 0 4 (Chao False)),(Jogador 5 0 0 4 (Chao False))])

initialState :: [[Picture]] -> StatusGloss
initialState lt = (gameState,lt)

drawEstado :: Estado -> [[Picture]] -> [Picture]
drawEstado e@(Estado m lj) lt = (drawMapa m (width-d1) height lt) ++ (drawJogadores e lt)
                                          where d1 = 0--realToFrac (distanciaJogador (head lj)) 


drawMapa :: Mapa -> Float -> Float -> [[Picture]] -> [Picture]
drawMapa (p:ps) x y lt = (drawPista p x y lt)++(drawMapa ps x (y-hPeca) lt) 
drawMapa [] _ _ _      = []


drawPista :: Pista -> Float -> Float -> [[Picture]] -> [Picture]
drawPista (p:ps) x y lt   = (drawPeca p x y lt):(drawPista ps (x+wPeca) y lt)
drawPista [] _ _ _        = []


drawPeca :: Peca -> Float -> Float -> [[Picture]] -> Picture
drawPeca (Recta p i1) x y (_:[rtTerra,rtCola,rtRelva,rtBoost,rtLama]:_:_:lb:[]) = 
                                       case p of 
                                         Terra -> Pictures ((Translate x (y+px) (Scale 1 0.5 rtTerra)):(drawBlock (p,i1) x (y+px-100) lb))
                                         Cola  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rtCola)):(drawBlock (p,i1) x (y+px-100) lb))
                                         Relva -> Pictures ((Translate x (y+px) (Scale 1 0.5 rtRelva)):(drawBlock (p,i1) x (y+px-100) lb))
                                         Boost -> Pictures ((Translate x (y+px) (Scale 1 0.5 rtBoost)):(drawBlock (p,i1) x (y+px-100) lb))
                                         Lama  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rtLama)):(drawBlock (p,i1) x (y+px-100) lb))
                                        where px = (realToFrac i1)*100
drawPeca r@(Rampa p i1 i2) x y lt | i1-i2 > 0 = drawDescida r x y lt
                                  | i1-i2 < 0 = drawSubida r x y lt

drawDescida :: Peca -> Float -> Float -> [[Picture]] -> Picture
drawDescida (Rampa p i1 i2) x y (_:_:_:[rD1Terra,rD2Terra,rD3Terra,rD4Terra,rD1Cola,rD2Cola,rD3Cola,rD4Cola,rD1Relva,rD2Relva,rD3Relva,rD4Relva,rD1Boost,rD2Boost,rD3Boost,rD4Boost,rD1Lama,rD2Lama,rD3Lama,rD4Lama]:lb:[]) = 
                                       case (p,dif) of 
                                         (Terra,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Terra)):(drawBlock (p,i2) x (y+px-100) lb))
                                         (Cola,1)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Cola)):(drawBlock (p,i2) x (y+px-100) lb))
                                         (Relva,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Relva)):(drawBlock (p,i2) x (y+px-100) lb))
                                         (Boost,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Boost)):(drawBlock (p,i2) x (y+px-100) lb))
                                         (Lama,1)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Lama)):(drawBlock (p,i2) x (y+px-100) lb))
                                         (Terra,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD2Terra)):(drawBlock (p,i2) x (y+px-150) lb))
                                         (Cola,2)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD2Cola)):(drawBlock (p,i2) x (y+px-150) lb))
                                         (Relva,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD2Relva)):(drawBlock (p,i2) x (y+px-150) lb))
                                         (Boost,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD1Boost)):(drawBlock (p,i2) x (y+px-150) lb))
                                         (Lama,2)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD2Lama)):(drawBlock (p,i2) x (y+px-150) lb))
                                         (Terra,3)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD3Terra)):(drawBlock (p,i2) x (y+px-200) lb))
                                         (Cola,3)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD3Cola)):(drawBlock (p,i2) x (y+px-200) lb))
                                         (Relva,3)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD3Relva)):(drawBlock (p,i2) x (y+px-200) lb))
                                         (Boost,3)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD3Boost)):(drawBlock (p,i2) x (y+px-200) lb))
                                         (Lama,3)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD3Lama)):(drawBlock (p,i2) x (y+px-200) lb))
                                         (Terra,4)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD4Terra)):(drawBlock (p,i2) x (y+px-250) lb))
                                         (Cola,4)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD4Cola)):(drawBlock (p,i2) x (y+px-250) lb))
                                         (Relva,4)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD4Relva)):(drawBlock (p,i2) x (y+px-250) lb))
                                         (Boost,4)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD4Boost)):(drawBlock (p,i2) x (y+px-250) lb))
                                         (Lama,4)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rD4Lama)):(drawBlock (p,i2) x (y+px-250) lb))
                                       where px  = realToFrac (50*(dif-1)+(i2*100))
                                             dif = i1-i2 
drawSubida :: Peca -> Float -> Float -> [[Picture]] -> Picture 
drawSubida (Rampa p i1 i2) x y (_:_:[rU1Terra,rU2Terra,rU1Cola,rU2Cola,rU1Relva,rU2Relva,rU1Boost,rU2Boost,rU1Lama,rU2Lama]:_:lb:[]) = 
                                       case (p,dif) of 
                                         (Terra,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Terra)):(drawBlock (p,i1) x (y+px-100) lb))
                                         (Cola,1)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Cola)):(drawBlock (p,i1) x (y+px-100) lb))
                                         (Relva,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Relva)):(drawBlock (p,i1) x (y+px-100) lb))
                                         (Boost,1)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Boost)):(drawBlock (p,i1) x (y+px-100) lb))
                                         (Lama,1)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Lama)):(drawBlock (p,i1) x (y+px-100) lb))
                                         (Terra,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU2Terra)):(drawBlock (p,i1) x (y+px-150) lb))
                                         (Cola,2)   -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU2Cola)):(drawBlock (p,i1) x (y+px-150) lb))
                                         (Relva,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU2Relva)):(drawBlock (p,i1) x (y+px-150) lb))
                                         (Boost,2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU1Boost)):(drawBlock (p,i1) x (y+px-150) lb))
                                         (Lama, 2)  -> Pictures ((Translate x (y+px) (Scale 1 0.5 rU2Lama)):(drawBlock (p,i1) x (y+px-150) lb))
                                       where px =  realToFrac (50*(dif-1)+(i1*100))
                                             dif = i2-i1 

drawBlock :: (Piso,Int) -> Float -> Float -> [Picture] -> [Picture]
drawBlock (_,0) _ _ _ = []
drawBlock (p,i) x y lt@[bTerra,bCola,bRelva,bBoost,bLama] = 
                             case p of
                              Terra -> (Translate x y (Scale 1 0.5 bTerra)):(drawBlock (p,(i-1)) x (y-100) lt)
                              Cola  -> (Translate x y (Scale 1 0.5 bCola)):(drawBlock (p,(i-1)) x (y-100) lt)
                              Relva -> (Translate x y (Scale 1 0.5 bRelva)):(drawBlock (p,(i-1)) x (y-100) lt)
                              Boost -> (Translate x y (Scale 1 0.5 bBoost)):(drawBlock (p,(i-1)) x (y-100) lt) 
                              Lama  -> (Translate x y (Scale 1 0.5 bLama)):(drawBlock (p,(i-1)) x (y-100) lt)

drawJogadores :: Estado -> [[Picture]] -> [Picture]
drawJogadores (Estado [] _) _     = []
drawJogadores (Estado m (h:t)) lt = (drawJogador h m lt):(drawJogadores (Estado m t) lt)

drawJogador :: Jogador -> Mapa -> [[Picture]] -> Picture
drawJogador j@(Jogador p d v c e) m s@([p1,p1M]:_:_:_:_:[]) = case e of 
                              Chao _   -> Translate (posxJogador d) (posyJogador j m)  p1                   
                              Ar a i _ -> Translate (posxJogador d) (posyJogador j m) (Rotate (realToFrac i) (Scale 0.75 0.75 p1))
                              Morto _  -> Translate (posxJogador d) (posyJogador j m) (Scale 0.75 0.75 p1M)

-- | Função que roda o jogador com a inclinação da Peça  
rotateJogador :: Jogador-> Mapa -> Picture -> Picture
rotateJogador j@(Jogador p d v c e) m x = Rotate (realToFrac(inclinacaoMota j m)) x
                              where 
                              altJ  = realToFrac(realToFrac (fst (altInc j m )) * hPeca)
                              incP  = realToFrac (inclinacaoPeca (pecaj))
                              pecaj = encontraPosicaoMatriz xy m
                              xy    = coordenadaJogador j

inclinacaoMota :: Jogador-> Mapa -> Double
inclinacaoMota j@(Jogador p d v c e) m = case pecaj of 
                                         Recta p 0   ->       0        -- o jogador não tem inclinação pois esta muma recta 
                                         Rampa p 0 1 ->   degrees (atan 0.5)  -- inclinação da peça é a sua altura (100) a dividir pela largura da peca (200)
                                         Rampa p 1 0 -> - degrees (atan 0.5)  -- inclinação da peca é a sua altura (100) a dividir pela largura da peca (200)
                                         Rampa p 0 2 ->   degrees (atan 1.0)  -- inclinação da peca é a sua altura (200) a dividir pela largura da peca (200)
                                         Rampa p 2 0 -> - degrees (atan 1.0)  -- inclinação da peca é a sua altura (200) a dividir pela largura da peca (200)
                              where 
                              altJ  = realToFrac(realToFrac (fst (altInc j m )) * hPeca) 
                              incP  = realToFrac (inclinacaoPeca (pecaj))
                              pecaj = encontraPosicaoMatriz xy m
                              xy    = coordenadaJogador j



posxJogador :: Double -> Float
posxJogador i = width + ((realToFrac (i+0.2))*wPeca)

posyJogador :: Jogador-> Mapa -> Float
posyJogador j@(Jogador p d v c e) m  = (height - (realToFrac ((p-1))*hPeca)) + ((altJogadorPeca j m)*hPeca)

altJogadorPeca:: Jogador -> Mapa -> Float
altJogadorPeca j@(Jogador p d v c e) m = 
                                  case pecaj of 
                                            Recta p n   -> 0        
                                            Rampa p 0 1 -> realToFrac (0.5 * d)
                                            Rampa p 1 0 -> realToFrac ((-0.5) * d)
                                            Rampa p 0 2 -> realToFrac (1 * d)
                                            Rampa p 2 0 -> realToFrac ((-1) * d) 
                                        where 
                                            pecaj = encontraPosicaoMatriz xy m
                                            xy    = coordenadaJogador j

altInicial :: Peca -> Int
altInicial (Rampa _ h _) = fromIntegral h
altInicial (Recta _ h)   = fromIntegral h


drawStatus :: StatusGloss -> Picture
drawStatus (e,(b:r)) = Pictures [bg, st]
                where bg = head b
                      st = Pictures (drawEstado e r)

reactEvent :: Event -> StatusGloss -> StatusGloss
reactEvent (EventKey (SpecialKey KeyUp)    Down _ _) (e@(Estado mapi lj),lp) = (jogada 1 (Movimenta C) e,lp)
reactEvent (EventKey (SpecialKey KeyDown)  Down _ _) (e@(Estado mapi lj),lp) = (jogada 1 (Movimenta B) e,lp)
reactEvent (EventKey (SpecialKey KeyLeft)  Down _ _) (e@(Estado mapi lj),lp) = (jogada 1 (Movimenta E) e,lp)
reactEvent (EventKey (SpecialKey KeyRight) Down _ _) (e@(Estado mapi lj),lp) = (jogada 1 (Movimenta D) e,lp)
reactEvent (EventKey (Char 'e')            Down _ _) (e@(Estado mapi lj),lp) = (jogada 1 Dispara e,lp)
reactEvent (EventKey (Char 'q')            Down _ _) (e@(Estado mapi lj),lp) = (Estado mapi ljn,lp)
                                                 where
                                                 j   = encontraIndiceLista 1 lj
                                                 jn  = passo 0.5 mapi j 
                                                 ljn = atualizaIndiceLista 1 jn lj
reactEvent _ s = s -- ignora qualquer outro evento



reactTime :: Float -> StatusGloss -> StatusGloss
reactTime  n ((Estado m ((Jogador a b c d e):t)),lt) = ((Estado m ((Jogador a (b+2) c d e):t)),lt)

main :: IO ()
main = do Just bg1      <- loadJuicy "../textures/bg/bg1.jpg"
          Just rtTerra  <- loadJuicy "../textures/map/reta/terra.png"
          Just rtCola   <- loadJuicy "../textures/map/reta/cola.png"
          Just rtRelva  <- loadJuicy "../textures/map/reta/relva.png"
          Just rtBoost  <- loadJuicy "../textures/map/reta/boost.png"
          Just rtLama   <- loadJuicy "../textures/map/reta/lama.png"
          Just rU1Terra <- loadJuicy "../textures/map/rampa/up/terra1.png"
          Just rU2Terra <- loadJuicy "../textures/map/rampa/up/terra2.png"   
          Just rU1Cola  <- loadJuicy "../textures/map/rampa/up/cola1.png"
          Just rU2Cola  <- loadJuicy "../textures/map/rampa/up/cola2.png"
          Just rU1Relva <- loadJuicy "../textures/map/rampa/up/relva1.png"
          Just rU2Relva <- loadJuicy "../textures/map/rampa/up/relva2.png"
          Just rU1Boost <- loadJuicy "../textures/map/rampa/up/boost1.png"
          Just rU2Boost <- loadJuicy "../textures/map/rampa/up/boost2.png"
          Just rU1Lama  <- loadJuicy "../textures/map/rampa/up/lama1.png"
          Just rU2Lama  <- loadJuicy "../textures/map/rampa/up/lama2.png"
          Just rD1Terra <- loadJuicy "../textures/map/rampa/down/terra1.png"
          Just rD2Terra <- loadJuicy "../textures/map/rampa/down/terra2.png"
          Just rD3Terra <- loadJuicy "../textures/map/rampa/down/terra3.png"
          Just rD4Terra <- loadJuicy "../textures/map/rampa/down/terra4.png"  
          Just rD1Cola  <- loadJuicy "../textures/map/rampa/down/cola1.png"
          Just rD2Cola  <- loadJuicy "../textures/map/rampa/down/cola2.png"
          Just rD3Cola  <- loadJuicy "../textures/map/rampa/down/cola3.png"
          Just rD4Cola  <- loadJuicy "../textures/map/rampa/down/cola4.png"
          Just rD1Relva <- loadJuicy "../textures/map/rampa/down/relva1.png"
          Just rD2Relva <- loadJuicy "../textures/map/rampa/down/relva2.png"
          Just rD3Relva <- loadJuicy "../textures/map/rampa/down/relva3.png"
          Just rD4Relva <- loadJuicy "../textures/map/rampa/down/relva4.png"
          Just rD1Boost <- loadJuicy "../textures/map/rampa/down/boost1.png"
          Just rD2Boost <- loadJuicy "../textures/map/rampa/down/boost2.png"
          Just rD3Boost <- loadJuicy "../textures/map/rampa/down/boost3.png"
          Just rD4Boost <- loadJuicy "../textures/map/rampa/down/boost4.png"
          Just rD1Lama  <- loadJuicy "../textures/map/rampa/down/lama1.png"
          Just rD2Lama  <- loadJuicy "../textures/map/rampa/down/lama2.png"
          Just rD3Lama  <- loadJuicy "../textures/map/rampa/down/lama3.png"  
          Just rD4Lama  <- loadJuicy "../textures/map/rampa/down/lama4.png"
          Just bTerra   <- loadJuicy "../textures/map/reta/blockterra.png"
          Just bCola    <- loadJuicy "../textures/map/reta/blockcola.png"
          Just bRelva   <- loadJuicy "../textures/map/reta/blockrelva.png"
          Just bBoost   <- loadJuicy "../textures/map/reta/blockboost.png"
          Just bLama    <- loadJuicy "../textures/map/reta/blocklama.png"
          Just p1       <- loadJuicy "../textures/players/p1.png"  
          Just p1M      <- loadJuicy "../textures/players/p1M.png" 
          play window
               background
               frameRate
               (initialState [[bg1],
                              [p1,p1M],
                              [rtTerra,rtCola,rtRelva,rtBoost,rtLama],
                              [rU1Terra,rU2Terra,rU1Cola,rU2Cola,rU1Relva,rU2Relva,rU1Boost,rU2Boost,rU1Lama,rU2Lama],
                              [rD1Terra,rD2Terra,rD3Terra,rD4Terra,rD1Cola,rD2Cola,rD3Cola,rD4Cola,rD1Relva,rD2Relva,rD3Relva,rD4Relva,rD1Boost,rD2Boost,rD3Boost,rD4Boost,rD1Lama,rD2Lama,rD3Lama,rD4Lama],
                              [bTerra,bCola,bRelva,bBoost,bLama]
                              ])
               drawStatus
               reactEvent
               reactTime





