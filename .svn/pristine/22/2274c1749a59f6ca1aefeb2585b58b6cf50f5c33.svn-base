-- | Este módulo define funções comuns da Tarefa 6 do trabalho prático.
module Tarefa6_2019li1g102 where
import Tarefa0_2019li1g102
import Tarefa1_2019li1g102
import Tarefa2_2019li1g102
import Tarefa3_2019li1g102
import Tarefa4_2019li1g102
import LI11920
import Data.List 

-- * Funções principais da Tarefa 6.

-- | Define um ro'bot' capaz de jogar autonomamente o jogo.
bot :: Int          -- ^ O identificador do 'Jogador' associado ao ro'bot'.
    -> Estado       -- ^ O 'Estado' para o qual o ro'bot' deve tomar uma decisão.
    -> Maybe Jogada -- ^ Uma possível 'Jogada' a efetuar pelo ro'bot'.
bot n (Estado m (j:js)) | not(travessia j1) || altj1 /= 0    = Just Acelera
                        | travessia j1      && (altj1 == 0)  = (if posAtrito == (pista j1) then Just Acelera
                                                                                    else (if (posAtrito > pista j1) then Just (Movimenta B )
                                                                                            else Just (Movimenta C)))
                           where 
                            j1= encontraIndiceLista n (j:js)             
                            altj1= altJogador n (Estado m (j:js))
                            posAtrito = pSeguinte j1 m 


-- | Funçao que encontra um jogador no mapa
encontraJogadorNoMapa :: Int -> Estado -> Peca 
encontraJogadorNoMapa n (Estado m (j:js)) =  encontraPosicaoMatriz (coordenadaJogador j1) m 
                           where 
                            j1= encontraIndiceLista n (j:js)

-- | Posição da peça seguinte com menor atrito
pSeguinte :: Jogador -> Mapa -> Double
pSeguinte j m = atritoList (colunaMapa j m)


-- | Função que devolve uma coluna do Mapa
colunaMapa ::Jogador -> Mapa -> [Peca] 
colunaMapa (Jogador _ b _ _ _)  m = encontraColunaMapa ((floor b)+1) (transpose m) 


-- | Função que devolve uma coluna de um mapa
encontraColunaMapa ::  Int -> Mapa -> [Peca]
encontraColunaMapa 0 (h:t) = h 
encontraColunaMapa n (h:t) = encontraColunaMapa (n-1) t


-- | Função que calcula na lista de pecas seguintes qual a peça com menor atrito e devolve a pista da mesma 
atritoList ::  [Peca] -> Double
atritoList (h:t) = pMenor (map atrito (h:t))


-- | Função que da a posição do menor elemento numa l sta
pMenor :: Ord a => [a] -> Double
pMenor [h] = 0
pMenor (h:t)= if h == aux (h:t) then 0.0
              else 1.0+pMenor t
              where
              aux [x] = x 
              aux (x1:x2:xs)= if x1<x2 then aux (x1:xs)
                              else aux (x2:xs)

-- | Função que calcula se o jogador esta a passar de uma peca para outra 
travessia :: Jogador -> Bool
travessia (Jogador _ b _ _ _ ) = if  b < (fromIntegral(floor b)) +1 then False
                                 else True 

-- | Função que calcula altura de um jogador 
altJogador :: Int -> Estado -> Double
altJogador n est = altPeca (encontraJogadorNoMapa n est )

-- | Função que da a pista em que um jogador se encontra 
pista :: Jogador -> Double
pista (Jogador a _ _ _ _ ) = fromIntegral a 

